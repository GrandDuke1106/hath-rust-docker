name: Build and Publish to Docker Hub

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  # 您可以在这里定义镜像的基础名称
  IMAGE_REPO_NAME: hath-rust-distroless
  # 指定要克隆和编译的 hath-rust 版本
  HATH_RUST_VERSION: 'v1.12.1'

jobs:
  # Job 1: 交叉编译所有架构的 MUSL 静态二进制文件
  # (此部分与之前的回答完全相同，无需改动)
  build-binaries:
    name: Build static binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            arch: amd64
          #- target: aarch64-unknown-linux-musl
          #  arch: arm64
          #- target: armv7-unknown-linux-musleabihf
          #  arch: arm
    steps:
      - name: Checkout hath-rust repository
        uses: actions/checkout@v4
        with:
          repository: 'james58899/hath-rust'
          ref: ${{ env.HATH_RUST_VERSION }}
      - name: Install Rust and musl target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools clang lld
      - name: Build static binary for ${{ matrix.target }}
        run: cargo build --release --target=${{ matrix.target }}
        env:
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: clang
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: clang
          CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER: clang
          RUSTFLAGS: "-C linker=clang -C link-arg=-fuse-ld=lld"
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: hath-rust-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/hath-rust
          retention-days: 1

  # Job 2: 构建并发布多平台 Docker 镜像到 Docker Hub
  build-and-push-docker:
    name: Build and Push Docker Image to Docker Hub
    needs: build-binaries
    runs-on: ubuntu-latest
    # `packages: write` 权限是用于 GHCR 的，如果只推送到 Docker Hub，可以移除
    permissions:
      contents: read

    steps:
      - name: Checkout repository with Dockerfile
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- 修改点 1: 登录到 Docker Hub ---
      # 移除了登录 GHCR 的步骤，换成登录 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- 修改点 2: 更新镜像元数据 ---
      # 将 images 指向您在 Docker Hub 上的仓库
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKERHUB_USERNAME }}/${{ env.IMAGE_REPO_NAME }}

      # --- 无需修改: build-and-push 会自动使用上面生成的标签 ---
      - name: Build and push multi-platform image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}